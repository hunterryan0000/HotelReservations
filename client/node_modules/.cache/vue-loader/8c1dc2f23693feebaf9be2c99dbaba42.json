{"remainingRequest":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Student\\workspace\\HotelReservations\\client\\src\\views\\HotelsView.vue?vue&type=style&index=0&id=c2108784&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\src\\views\\HotelsView.vue","mtime":1688830719461},{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1680355300544},{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1680355304846},{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":1680355301937},{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680355299326},{"path":"C:\\Users\\Student\\workspace\\HotelReservations\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1680355303949}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNob3RlbC1ncmlkIHsKICBkaXNwbGF5OiBncmlkOwogIG1hcmdpbjogYXV0bzsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gYXV0byAxMDBweDsKICBjb2x1bW4tZ2FwOiAxMHB4OwogIHJvdy1nYXA6IDZweDsKICBtYXgtd2lkdGg6IDgwMHB4Owp9CgoudGFibGUtaGVhZGluZyB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0K"},{"version":3,"sources":["HotelsView.vue"],"names":[],"mappings":";AAgKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"HotelsView.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"hotel-list\">\n    <h1>\n      Hotels\n      <loading-spinner id=\"spinner\" v-bind:spin=\"isLoading\" />\n    </h1>\n\n    <!--Hotels table -->\n    <div id=\"hotel-grid\">\n      <div class=\"table-heading\">Hotel Name</div>\n      <div class=\"table-heading\">\n        State:\n        <select id=\"stateDropdown\" v-model=\"filter\" v-on:change=\"getHotels\">\n          <option value=\"\">All</option>\n          <option\n            v-for=\"state in states\"\n            v-bind:key=\"state\"\n            v-bind:value=\"state\"\n          >\n            {{ state }}\n          </option>\n        </select>\n      </div>\n      <div class=\"table-heading\">Cost</div>\n      <template v-for=\"hotel in hotels\">\n        <div v-bind:key=\"'a' + hotel.id\" class=\"table-data\">\n          <router-link\n            v-bind:to=\"{ name: 'hotel', params: { id: hotel.id } }\"\n            >{{ hotel.name }}</router-link\n          >\n        </div>\n        <div v-bind:key=\"'b' + hotel.id\" class=\"table-data\">\n          {{ hotel.address.state }}\n        </div>\n        <div v-bind:key=\"'c' + hotel.id\" class=\"table-data\">\n          {{ formatCurrency(hotel.costPerNight) }}\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport utility from \"../services/utility\";\nimport LoadingSpinner from \"../components/LoadingSpinner.vue\";\n//step 1.3\nimport hotelService from \"../services/HotelService\";\nexport default {\n  name: \"HotelsView\",\n  components: {\n    LoadingSpinner,\n  },\n  data() {\n    return {\n      isLoading: false, // true to indicate a call in progress\n      hotels: [], // an array of hotel objects to display\n      filter: \"\", // A state code to filter by, empty if showing all hotels\n      states: [], // An array of strings for all state codes for which we have hotels\n    };\n  },\n\n  methods: {\n    /***\n     * Get a list of hotels from the API.\n     */\n    getHotels() {\n      // Call the searchHotels method instead, if there is a filter set (the state dropdown)\n      if (this.filter) {\n        this.searchHotels();\n        return;\n      }\n\n      // Set the indicator that a call is in progress.\n      this.isLoading = true;\n\n      // TODO step 1.4: Use the Service object to `GET /hotels`. Set the body of the result to `this.hotels`. Handle errors.\n      hotelService\n        .getHotels()\n        .then((response) => {\n          this.hotels = response.data;\n      // When done (whether success or error) set the indicator that the call is complete.\n      this.isLoading = false;\n        })\n        .catch(error => {\n        if (error.response.status == 404) {\n          this.isLoading = false;\n          alert(error);\n        }\n      });\n    },\n    /***\n     * Get a list of states (an array of strings) in which any of our hotels are located\n     */\n    getStates() {\n      // Set the indicator that a call is in progress.\n      this.isLoading = true;\n\n      // TODO step 1.5: Use the Service object to `GET /hotels/states`. Set the body of the result to `this.states`. Handle errors.\n      hotelService\n        .getStates()\n        .then((response) => {\n          this.states = response.data;\n      // When done (whether success or error) set the indicator that the call is complete.\n      this.isLoading = false;\n      })\n        .catch(error => {\n        if (error.response.status == 404) {\n          this.isLoading = false;\n          alert(error);\n        }\n      });\n    },\n    /***\n     * Use this.filter to only return hotels in the state indicated by the filter.\n     */\n    searchHotels() {\n      // Set the indicator that a call is in progress.\n      this.isLoading = true;\n\n      // TODO step 1.6: Use the Service object to `GET /hotels?state=xx`. Set the body of the result to `this.hotels`. Handle errors.\n      hotelService\n        .searchHotels(this.filter)\n        .then((response) => {\n          this.hotels = response.data;\n      // When done (whether success or error) set the indicator that the call is complete.\n      this.isLoading = false;\n      })\n        .catch(error => {\n        if (error.response.status == 404) {\n          this.isLoading = false;\n          alert(error);\n        }\n      });\n    },\n    /***\n     * Navigate to the HotelDetails view\n     */\n    details(id) {\n      this.$router.push({ name: \"hotelDetails\", params: { id: id } });\n    },\n    /***\n     * Use the utility object to display a Number as USD.\n     */\n    formatCurrency(value) {\n      return utility.formatCurrency(value);\n    },\n  },\n\n  // TODO step 1.2: Create a Vue Lifecycle hook function which calls `this.getHotels()` and `this.getStates()`\n  created() {\n    // hotelService.getHotels().then( (response) => {\n    //     this.hotels = response.data;\n    // }); --> redundant because getHotels does this\n    this.getHotels();\n    this.getStates();\n  },\n};\n</script>\n\n<style scoped>\n#hotel-grid {\n  display: grid;\n  margin: auto;\n  grid-template-columns: auto auto 100px;\n  column-gap: 10px;\n  row-gap: 6px;\n  max-width: 800px;\n}\n\n.table-heading {\n  font-weight: bold;\n}\n</style>"]}]}